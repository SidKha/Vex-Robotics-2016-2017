#pragma config(Sensor, dgtl2,  middle,         sensorQuadEncoder)
#pragma config(Sensor, dgtl4,  drive,          sensorQuadEncoder)
#pragma config(Motor,  port1,           strafe_one,    tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           leftDrive,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           rightDrive,    tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           arm_left,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           arm_right,     tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           arm_left_two,  tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           arm_right_two, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           claw_left,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           claw_right,    tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          strafe_two,    tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
	// Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////
void moveBack(int moveValue) {
	SensorValue[drive] = 0;	
	SensorValue[middle] = 0;
	while(SensorValue[drive] < moveValue) {
		motor[leftDrive] = -100;
		motor[rightDrive] = -100;
	}
}
void strafeAuto(int strafeValue) {
	SensorValue[drive] = 0;	
	SensorValue[middle] = 0;
	while(SensorValue[drive] < strafeValue) { 
		motor[strafe_two] = 127; 
		motor[strafe_one] = 127; 
	}
}
void forward(int forwardValue) { 
	SensorValue[drive] = 0;	
	SensorValue[middle] = 0;
	while(SensorValue[drive] < 2000) {
		motor[leftDrive] = 100;
		motor[rightDrive] = 100;
	}
}

		

task autonomous()
{
SensorValue[drive] = 0;	
SensorValue[middle] = 0;	

forward(2000);
moveBack(260);
strafeAuto(860); 
forward(260);
moveBack(260);
strafeAuto(860); 
forward(260);






		
		
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////
	void moveDrive(int l, int r);
	void moveArm(int power);
	void strafe(int power);
task usercontrol()
{
	// User control code here, inside the loop
	while (true) {
		moveDrive(vexRT[Ch3], vexRT[Ch2]);
		if (vexRT[Btn6D]) {
			strafe(127);
			} else if (vexRT[Btn5D]) {
			strafe(-127);
			} else {
			strafe(0);
		}
		moveArm(vexRT[Ch3Xmtr2]);
	}
}

/*
void moveDrive(int left, int right)
Moves the drive motors in pairs.
@param: l: the power for the left drive motors.
@param: r: the power for the right drive motors.
@return: void: nothing.
*/
void moveDrive(int l, int r) {
	motor[leftDrive]  = l;
	motor[rightDrive] = r;
}
/*
void moveArm(int power)
Moves the arm up or down.
@param: power: the motor power. neg is down, pos is up.
*/
void moveArm(int power) {
	motor[arm_left]  = power;
	motor[arm_left_two]  = power;
	motor[arm_right] = power;
	motor[arm_right_two] = power;
}
/*
void strafe(int power);
Strafes one direction.
@param: power: the strafe motor power
*/
void strafe(int power) {
	motor[strafe_one] = power;
	motor[strafe_two] = power;
}
